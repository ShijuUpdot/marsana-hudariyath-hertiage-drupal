{#
/**
 * @file
 * Theme override for the basic structure of a single Drupal page.
 *
 * Variables:
 * - logged_in: A flag indicating if user is logged in.
 * - root_path: The root path of the current page (e.g., node, admin, user).
 * - node_type: The content type for the current node, if the page is a node.
 * - head_title: List of text elements that make up the head_title variable.
 *   May contain one or more of the following:
 *   - title: The title of the page.
 *   - name: The name of the site.
 *   - slogan: The slogan of the site.
 * - page_top: Initial rendered markup. This should be printed before 'page'.
 * - page: The rendered page markup.
 * - page_bottom: Closing rendered markup. This variable should be printed after
 *   'page'.
 * - db_offline: A flag indicating if the database is offline.
 * - placeholder_token: The token for generating head, css, js and js-bottom
 *   placeholders.
 *
 * @see template_preprocess_html()
 */
#}
{%
  set body_classes = [
    logged_in ? 'user-logged-in',
    not root_path ? 'path-frontpage' : 'path-' ~ root_path|clean_class,
    node_type ? 'page-node-type-' ~ node_type|clean_class,
    db_offline ? 'db-offline',
    langclass
  ]
%}
<!DOCTYPE html>
<html{{ html_attributes }}>
  <head>
	<!-- Global site tag (gtag.js) - Google Analytics -->
	<script async src="https://www.googletagmanager.com/gtag/js?id=UA-110212161-4"></script>
	<script>
	window.dataLayer = window.dataLayer || [];
	function gtag(){dataLayer.push(arguments);}
	gtag('js', new Date());

	gtag('config', 'UA-110212161-4');
</script>
    <head-placeholder token="{{ placeholder_token }}">
    <title>{{ head_title|safe_join(' | ') }}</title>
    <css-placeholder token="{{ placeholder_token }}">
    <js-placeholder token="{{ placeholder_token }}">
	<!-- Global site tag (gtag.js) - Google Analytics -->
	<script async src="https://www.googletagmanager.com/gtag/js?id=G-Q5VEYYZ7HT"></script>
	<script>
  	window.dataLayer = window.dataLayer || [];
  	function gtag(){dataLayer.push(arguments);}
  	gtag('js', new Date());
  	gtag('config', 'G-Q5VEYYZ7HT');

    var canvas, stage, exportRoot, anim_container, dom_overlay_container, fnStartAnimation;
      function init() {
          canvas = document.getElementById("canvas");
          anim_container = document.getElementById("animation_container");
          dom_overlay_container = document.getElementById("dom_overlay_container");
          var comp=AdobeAn.getComposition("A42E2BB558684518BE188CDFE25F34E0");
          var lib=comp.getLibrary();
          var loader = new createjs.LoadQueue(false);
          loader.addEventListener("fileload", function(evt){handleFileLoad(evt,comp)});
          loader.addEventListener("complete", function(evt){handleComplete(evt,comp)});
          var lib=comp.getLibrary();
          loader.loadManifest(lib.properties.manifest);
      }
      function handleFileLoad(evt, comp) {
          var images=comp.getImages();	
          if (evt && (evt.item.type == "image")) { images[evt.item.id] = evt.result; }	
      }
      function handleComplete(evt,comp) {
          //This function is always called, irrespective of the content. You can use the variable "stage" after it is created in token create_stage.
          var lib=comp.getLibrary();
          var ss=comp.getSpriteSheet();
          var queue = evt.target;
          var ssMetadata = lib.ssMetadata;
          for(i=0; i<ssMetadata.length; i++) {
              ss[ssMetadata[i].name] = new createjs.SpriteSheet( {"images": [queue.getResult(ssMetadata[i].name)], "frames": ssMetadata[i].frames} )
          }
          exportRoot = new lib.marsanabganimatedv1();
          stage = new lib.Stage(canvas);	
          //Registers the "tick" event listener.
          fnStartAnimation = function() {
              stage.addChild(exportRoot);
              createjs.Ticker.framerate = lib.properties.fps;
              createjs.Ticker.addEventListener("tick", stage);
          }	    
          //Code to support hidpi screens and responsive scaling.
          AdobeAn.makeResponsive(false,'both',false,1,[canvas,anim_container,dom_overlay_container]);	
          AdobeAn.compositionLoaded(lib.properties.id);
          fnStartAnimation();
      }
	</script>
  <script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "Corporation",
  "name": "Marsana",
  "alternateName": "Marsana",
  "url": "https://www.marsana.ae/",
  "logo": "https://stmodonprod.blob.core.windows.net/stmarsanaprodblob/2020-12/logo_1.svg",
  "sameAs": [
    "https://www.facebook.com/marsana.hudayriyat/",
    "https://instagram.com/marsana.hudayriyat"
  ]
}
</script>
<script type="text/javascript">
(function(w,d,s,r,k,h,m){
    if(w.performance && w.performance.timing && w.performance.navigation) {
        w[r] = w[r] || function(){(w[r].q = w[r].q || []).push(arguments)};
        h=d.createElement('script');h.async=true;h.setAttribute('src',s+k);
        d.getElementsByTagName('head')[0].appendChild(h);
        (m = window.onerror),(window.onerror = function (b, c, d, f, g) {
        m && m(b, c, d, f, g),g || (g = new Error(b)),(w[r].q = w[r].q || []).push(["captureException",g]);})
    }
})(window,document,'//static.site24x7rum.com/beacon/site24x7rum-min.js?appKey=','s247r','6fe8d965413a30f7fb9837f28edc56ef');
</script>
  </head>
  <body{{ attributes.addClass(body_classes) }} onload="init();">
    {#
      Keyboard navigation/accessibility link to main content section in
      page.html.twig.
    #}
    <a href="#main-content" class="visually-hidden focusable skip-link">
      {{ 'Skip to main content'|t }}
    </a>
    {{ page_top }}
    {{ page }}
    {{ page_bottom }}
    <js-bottom-placeholder token="{{ placeholder_token }}">
  </body>
</html>
