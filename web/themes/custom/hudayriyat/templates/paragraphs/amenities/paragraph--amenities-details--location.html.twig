{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished'
  ]
%}
{% block paragraph %}
  {% block content %}
  {% for key, item in content.field_location_details  %}
  {% if key|first != '#' %}
  {% if content.field_location_details[key]['#paragraph'].field_locat[0].value|length %}
  {% if langcode == 'en' %}
	  {% set directionsTitle = drupal_config('hudayriyat_custom_configs.settings', 'custom_configs_directions_title_en') %}
  {% else %}
    {% set directionsTitle = drupal_config('hudayriyat_custom_configs.settings', 'custom_configs_directions_title_ar') %}
  {% endif %}
  {% set url =  url('<current>') |render|render %}

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyByibP_BbGWDRUn-X3PXD36_jDmsIwlYic&v=3.0&sensor=true&language=ee&dummy=dummy.js"></script>
    
    <div class="row">
        <div class="col">
          <p class="detailed-txt opacity-text bold">{{ content.field_location_details[key]['#paragraph'].field_location_at[0].value|raw|striptags|trim }}</p>
        </div>
    </div>
    <div class="row">
        <div class="col">
			{% if 'fenix' not in url %}
				<div class="map-img" id="map_canvas1">
					<iframe src="{{ content.field_location_details[key]['#paragraph'].field_location_iframe_url[0].value }}" width="100%" height="400" frameborder="0" style="border:0;" allowfullscreen="" aria-hidden="false" tabindex="0"></iframe>  
				</div>
			{% else %}
				<div class="map-img" id="map_canvas">
				</div>
			{% endif %}
        </div>
    </div>
    <br><br>
  {% endif %}
  {% endif %}
  {% endfor %}
  {% endblock %}
{% endblock paragraph %}

<script>
function initialize() {
	//if(document.getElementById("map_canvas")) { alert(9); return false; }
    var map;
    var bounds = new google.maps.LatLngBounds();
    var mapOptions = {
        mapTypeId: 'roadmap'
    };
                    
    // Display a map on the page
    map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);
    map.setTilt(45);
        
    // Multiple Markers
    var markers = [
		["Fenix escooter location 1",24.413805,54.348315],
		["Fenix escooter location 1",24.41384,54.347419],
		["Fenix escooter location 1",24.41681,54.33375],
		["Fenix escooter location 1",24.417003,54.331261],
		["Fenix escooter location 1",24.41701,54.33068],
		["Fenix escooter location 1",24.41719,54.33007],
		["Fenix escooter location 1",24.41419,54.34685]
    ];
                        
    // Info Window Content
    var infoWindowContent = [
        ['<div class="info_content">' +
        '<h3>London Eye</h3>' +
        '<p>The London Eye is a giant Ferris wheel situated on the banks of the River Thames. The entire structure is 135 metres (443 ft) tall and the wheel has a diameter of 120 metres (394 ft).</p>' +        '</div>'],
        ['<div class="info_content">' +
        '<h3>Palace of Westminster</h3>' +
        '<p>The Palace of Westminster is the meeting place of the House of Commons and the House of Lords, the two houses of the Parliament of the United Kingdom. Commonly known as the Houses of Parliament after its tenants.</p>' +
        '</div>']
    ];
        
    // Display multiple markers on a map
    var infoWindow = new google.maps.InfoWindow(), marker, i;
    
    // Loop through our array of markers & place each one on the map  
    for( i = 0; i < markers.length; i++ ) {
        var position = new google.maps.LatLng(markers[i][1], markers[i][2]), markerTitle= markers[i][0];
        bounds.extend(position);
        marker = new google.maps.Marker({
            position: position,
            map: map,
            title: markerTitle
        });
        
        // Allow each marker to have an info window    
        google.maps.event.addListener(marker, 'click', (function(marker, i) {
            return function() {
                infoWindow.setContent(markerTitle);
                infoWindow.open(map, marker);
            }
        })(marker, i));

        // Automatically center the map fitting all markers on the screen
        map.fitBounds(bounds);
    }

    // Override our map zoom level once our fitBounds function runs (Make sure it only runs once)
    var boundsListener = google.maps.event.addListener((map), 'bounds_changed', function(event) {
        this.setZoom(16);
        google.maps.event.removeListener(boundsListener);
    });
    
}
initialize();
</script>