{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished'
  ]
%}
{% block paragraph %}
  {% block content %}
  {% if content.field_information[0]|render|striptags|trim|length %}
  {% set url =  url('<current>') |render|render %}
    {% set linkurl = content['field_link'].0['#url'] %}
    {% set linktitle = content['field_link'].0['#title']%}
        <section class="related-content related-interaction white-bg" data-scroll-speed="4">
              <ul class="interaction-external">
                {% for key, item in content.field_information %}
                {% if key|first != '#' %}
                    <li>
                      <div class="interaction-external-wrapper w-100 text-center">
                          <div class="detailed-title">
                          <img src="{{ file_url(content.field_information[key]['#paragraph'].field_icon[0].entity.uri.value) }}" alt="">
                          <p>{{ content.field_information[key]['#paragraph'].field_title[0].value|raw|striptags }}</p>
                          </div>
                          {{ content.field_information[key]['#paragraph'].field_intro_description[0].value | raw }}
                      </div>
                    </li>
                {% endif %}
                {% endfor %}
                {% if linkurl is not empty and  linktitle is not empty %}
                  <li class="navy-bg ticket">
                    <div class="interaction-external-wrapper">
                      <a href="{{linkurl}}" target="_blank" class="external-link"></a>
                      <img src="" alt="">
                      <p>{{ linktitle }}</p>
                      <img src="{{ file_url(content.field_link_icon['#items'][0].entity.uri.value) }}" alt="External">
                    </div>
                  </li>
                {% endif %}
              </ul>
          </section>
 {% endif %}
  {% endblock %}
{% endblock paragraph %}
