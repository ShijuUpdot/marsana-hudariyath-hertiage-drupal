<?php

/**
 * @file
 * Provides hooks for Webforms Ajax module.
 */

use Drupal\webform\Entity\WebformSubmission;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\SettingsCommand;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\taxonomy\Entity\Term;
use PHPMailer\PHPMailer\PHPMailer;
use Drupal\views\ViewExecutable;
use Drupal\Core\Database\Query\AlterableInterface;

/**
 * Implements hook_preprocess_comment().
 */
function ajax_custom_webform_preprocess_comment(&$variables) {
  $variables['classes_array'][] = 'form-control';
}

/**
 * Implements hook_form_alter().
 */
function ajax_custom_webform_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#attached']['library'][] = 'ajax_custom_webform/ajax_custom_webform';
  if (isset($form['#webform_id'])) {
    if ($form['#webform_id'] == 'contact') {
      $form['elements']['your_name']['#access'] = FALSE;
     // $form['elements']['phone_number']['#access'] = FALSE;
      $form['elements']['email_source']['#access'] = FALSE;
      foreach ($form['elements'] as $k => $val) {
        $el_cl = $k . 'fm';
        $el_lbid = $k . 'fe';
        if ($k == 'inquiry') {
          $form['elements'][$k]['#prefix'] = '<div class="form-row"><div class="form-group col-md-5 ' . $el_cl . '">';
          $form['elements'][$k]['#suffix'] = '<label class="error"><span class="error ' . $el_lbid . '"></span></label></div></div>';
        }
        if ($k == 'first_name') {
          $form['elements'][$k]['#prefix'] = '<div class="form-row"><div class="form-group col-md-4 ' . $el_cl . '">';
          $form['elements'][$k]['#suffix'] = '<label class="error"><span class="error ' . $el_lbid . '"></span></label></div>';
        }
        if ($k == 'last_name') {
          $form['elements'][$k]['#prefix'] = '<div class="form-group col-md-4 ' . $el_cl . '">';
          $form['elements'][$k]['#suffix'] = '<label class="error"><span class="error ' . $el_lbid . '"></span></label></div>';
        }
        if ($k == 'email') {
          $form['elements'][$k]['#prefix'] = '<div class="form-group col-md-4 ' . $el_cl . '">';
          $form['elements'][$k]['#suffix'] = '<label class="error"><span class="error ' . $el_lbid . '"></span></label></div></div>';
        }
        if ($k == 'country') {
          $form['elements'][$k]['#prefix'] = '<div class="form-row"><div class="form-row col-md-4 "><div class="form-group ' . $el_cl . '">';
          $form['elements'][$k]['#suffix'] = '<label class="error"><span class="error ' . $el_lbid . '"></span></label></div></div>';
        }
        if ($k == 'phone_number') {
          $form['elements'][$k]['#prefix'] = '<div class="col-md-8"><div class="form-group d-flex tel-field ' . $el_cl . '"><div class="input-group-prepend">
                    <div class="input-group-text">+971</div>
                  </div>';
          $form['elements'][$k]['#suffix'] = '<label class="error"><span class="error ' . $el_lbid . '"></span></label></div></div></div>';
        }
        if ($k == 'message') {
          $form['elements'][$k]['#prefix'] = '<div class="form-group ' . $el_cl . '">';
          $form['elements'][$k]['#suffix'] = '<label class="error"><span class="error ' . $el_lbid . '"></span></label></div>';
        }
      }
      $form['actions']['submit']['#ajax'] = [
        'callback' => 'contact_form_callback',
        'wrapper' => 'functionIssue',
        'event' => 'click',
        'progress' => array(
              'type' => 'throbber',
              'message' => t('Sending ...'),
            ),
      ];
      $form['actions']['submit']['#validate'][] = 'contact_form_form_validate';
      return $form;
    } elseif ($form['#webform_id'] == 'search') {
        foreach ($form['elements'] as $k => $val) {
          $el_cl = $k . 'fm';
          $el_lbid = $k . 'fe';
          if ($k == 'experience') {
            $form['elements'][$k]['#prefix'] = '<div class="col-md-6 col-lg-3 py-4"><div class="dropdown amenities ' . $el_cl . '">';
            $form['elements'][$k]['#suffix'] = '<label class="error"><span class="error ' . $el_lbid . '"></span></label></div></div>';
          }
          if ($k == 'locations') {
            $form['elements'][$k]['#prefix'] = '<div class="col-md-6 col-lg-3 py-4"><div class="dropdown locations ' . $el_cl . '">';
            $form['elements'][$k]['#suffix'] = '<label class="error"><span class="error ' . $el_lbid . '"></span></label></div></div>';
          }
          if ($k == 'search_text') {
            $form['elements'][$k]['#prefix'] = '<div class="col-lg-6 py-4"><div class="input-group ' . $el_cl . '">';
            $form['elements'][$k]['#suffix'] = '<label class="error"><span class="error ' . $el_lbid . '"></span></label></div></div>';
          }
        }

        $form['actions']['submit']['#ajax'] = [
          'callback' => 'search_form_callback',
          'wrapper' => 'functionIssue',
          'event' => 'click',
          'progress' => array(
                //'type' => 'throbber',
           ),
        ];

        //$form['actions']['submit']['#validate'][] = 'contact_form_form_validate';
        return $form;
    }
  }
}

/**
 * Call back function.
 */
function _allowed_formats_remove_textarea_help($form_element, FormStateInterface $form_state) {
  if (isset($form_element[0]['format'])) {
    // All this stuff is needed to hide the help text.
    unset($form_element[0]['format']['guidelines']);
    unset($form_element[0]['format']['help']);
    unset($form_element[0]['format']['#type']);
    unset($form_element[0]['format']['#theme_wrappers']);
    $form_element[0]['format']['format']['#access'] = FALSE;
    unset($form_element[0]['format']);
  }
  return $form_element;
}

/**
 * Call back function.
 */
function contact_form_callback(array &$form, FormStateInterface $form_state) {
  $response = new AjaxResponse();
  $language_manager = \Drupal::languageManager();
  $config = \Drupal::config('hudayriyat_custom_configs.settings');
  $confirmmsg = $config->get('custom_configs_contact_success_en');
  $language_code =  $language_manager->getCurrentLanguage()->getId();
  if($language_code == 'ar') {
    $confirmmsg  = $config->get('custom_configs_contact_success_ar');
  }
  foreach ($form_state->getValues() as $k => $val) {
    $el_cl = '.' . $k . 'fm';
    $el_lbid = '.' . $k . 'fe';
    if (in_array($k, array_keys($form_state->getErrors()))) {
      \Drupal::messenger()->deleteAll();
      $response->addCommand(new InvokeCommand($el_cl, 'addClass', ['has-error']));
      $response->addCommand(new HtmlCommand($el_lbid, $form_state->getErrors()[$k]));
      $response->addCommand(new InvokeCommand($el_lbid, 'css', ['display', 'inline']));
    }
    else {
      $response->addCommand(new InvokeCommand($el_cl, 'removeClass', ['has-error']));
      $response->addCommand(new InvokeCommand($el_lbid, 'css', ['display', 'none']));
    }
  }

  $response->addCommand(new SettingsCommand(['errorcode' => 1], TRUE));
  $response->addCommand(new InvokeCommand('.contact-success', 'css', ['background-color', '#FFF']));
  if (empty($form_state->getErrors())) {
    $response->addCommand(new InvokeCommand('#edit-inquiry', 'val', ['General Inquiry']));
    $response->addCommand(new InvokeCommand('#edit-first-name', 'val', ['']));
    $response->addCommand(new InvokeCommand('#edit-last-name', 'val', ['']));
    $response->addCommand(new InvokeCommand('#edit-phone-number', 'val', ['']));
    $response->addCommand(new InvokeCommand('#edit-email', 'val', ['']));
    $response->addCommand(new InvokeCommand('#edit-message', 'val', ['']));
    $response->addCommand(new InvokeCommand('#country', 'val', ['United Arab Emirates']));
    $response->addCommand(new InvokeCommand('.messages', 'css', ['display', 'block']));
    if($form_state->getCompleteForm()["confirmation"]["#webform"])
      $response->addCommand(new HtmlCommand('.messages--status', $form_state->getCompleteForm()["confirmation"]["#webform"]->getSettings()["confirmation_message"]));
      $response->addCommand(new HtmlCommand('.form-alert-msg',  $confirmmsg));
      $response->addCommand(new HtmlCommand('.contact-close', "<span aria-hidden='true'>&times;</span>"));
      $response->addCommand(new InvokeCommand('.contact-success', 'css', ['background-color', '#419C9B']));
      $response->addCommand(new InvokeCommand('.contact-success', 'css', ['display', 'block']));
  }
  return $response;
}

/**
 * Search Call back function.
 */
function search_form_callback(array &$form, FormStateInterface $form_state) {

  $response = new AjaxResponse();
  $limit = 6; $n=0;

  $experience = $form_state->getValue('experience');
  $locations = $form_state->getValue('locations');
  $search_text = $form_state->getValue('search_text');
  $amenity_types = $form_state->getValue('amenities');
  $amenity_tags = $form_state->getValue('amenity_tags');
  $pageno = $form_state->getValue('pageno');

  foreach ($form_state->getValues() as $k => $val) {
    $el_cl = '.' . $k . 'fm';
    $el_lbid = '.' . $k . 'fe';
    if (in_array($k, array_keys($form_state->getErrors()))) {
      \Drupal::messenger()->deleteAll();
      $response->addCommand(new InvokeCommand($el_cl, 'addClass', ['has-error']));
      $response->addCommand(new HtmlCommand($el_lbid, $form_state->getErrors()[$k]));
      $response->addCommand(new InvokeCommand($el_lbid, 'css', ['display', 'inline']));
    } else {
      $response->addCommand(new InvokeCommand($el_cl, 'removeClass', ['has-error']));
      $response->addCommand(new InvokeCommand($el_lbid, 'css', ['display', 'none']));
    }
  }

  $response->addCommand(new SettingsCommand(['errorcode' => 1], TRUE));
  if (empty($form_state->getErrors())) {
    $response->addCommand(new InvokeCommand('#edit-experience', 'val', ['All Amenities']));
    $response->addCommand(new InvokeCommand('#edit-locations', 'val', ['All locations']));
    $response->addCommand(new InvokeCommand('.messages', 'css', ['display', 'block']));

          $lang_id = \Drupal::languageManager()->getCurrentLanguage()->getId();

    $f_query = \Drupal::entityQuery('node')
              ->condition('status', '1')
              ->condition('langcode', $lang_id);

    $node_or_query = $f_query->orConditionGroup();
    $node_or_query->condition('type', 'amenities_details');
    if($search_text) {
      $node_or_query->condition('type', 'event_details');
      $node_or_query->condition('type', 'news_details');
      $node_or_query->condition('type', 'landing_details');
      $node_or_query->condition('type', 'eat');
      $node_or_query->condition('type', 'stay');
      $node_or_query->condition('type', 'discover');
      $node_or_query->condition('type', 'enjoy');
    }
    $f_query->condition($node_or_query);

    $or_query = $f_query->orConditionGroup();
    $and_query = $f_query->andConditionGroup();

    if($search_text || $experience ||  $locations ) {
      if($search_text) {

                    $searchOrqry = $f_query->orConditionGroup();
        $searchOrqry->condition('field_headline', "%".$search_text."%", 'LIKE');
        $searchOrqry->condition('field_intro_short_description', "%".$search_text."%", 'LIKE');
        $searchOrqry->condition('field_intro_description', "%".$search_text."%", 'LIKE');
        $searchOrqry->condition('field_hero_image_title', "%".$search_text."%", 'LIKE');
        $searchOrqry->condition('field_search_keywords', "%".$search_text."%", 'LIKE');
        $searchOrqry->condition('field_autosuggestion_keywords', "%".$search_text."%", 'LIKE');

                    $keyfeatures_nids=array();
        $keyfeatures_nids = \Drupal::database()->query("SELECT distinct parent_id from paragraphs_item_field_data where id in
                                            (SELECT distinct parent_id FROM `paragraphs_item_field_data` where id in
                                            (SELECT distinct entity_id FROM `paragraph__field_headline` where field_headline_value like '%$search_text%' and bundle = 'key_points_type') and parent_type='paragraph' and parent_field_name = 'field_key_points')")
                                            ->fetchCol(0);
        if(count($keyfeatures_nids) > 0) {
          $searchOrqry->condition('nid', $keyfeatures_nids, 'IN');
        }

        $and_query->condition($searchOrqry);
      }
      if($experience)
        $and_query->condition('field_amenity_experience', $experience, "IN");
      if($locations)
        $and_query->condition('field_amenity_location', $locations, "IN");
      $f_query->condition($and_query);

    }

    if(count($amenity_types)>0 || count($amenity_tags)>0) {
      if(count($amenity_types)>0)
        $or_query->condition('field_amenity_type', $amenity_types, "IN");
      if(count($amenity_tags)>0)
        $or_query->condition('field_amenity_tags', $amenity_tags, "IN");
      $f_query->condition($or_query);
    }

    $params=$param=[];
    $nids = $f_query->execute();

        if(count($nids) <= 0 && $experience) {
                $knids=array();
        $knids = \Drupal::database()->query("SELECT nid from node_field_data where type in
                                              (select lower(name) from taxonomy_term_field_data
                                                  where tid = $experience and langcode = '$lang_id')
                                                  and langcode = '$lang_id'")
                                           ->fetchCol(0);
      $nids = $knids;
    }

    if(count($nids) > 0) {
      $f_data = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($nids);

       foreach ($f_data as $node){
        if(++$n > $pageno*$limit) break;
        if(!$node->hasTranslation($lang_id)) break;
        $node = $node->getTranslation($lang_id);

        if($node->hasField('field_hero_image_title'))
          $param['title'] = $node->get('field_hero_image_title')->value;

        if($node->hasField('field_headline'))
          $param['headline'] = $node->get('field_headline')->value;

        if($node->hasField('field_intro_short_description'))
          $param['headline'] = $node->get('field_intro_short_description')->value;

        if($node->hasField('field_intro_sub_headlines'))
          $param['headline'] = $node->get('field_intro_sub_headlines')->value;

        if($node->hasField('field_experience_headline'))
          $param['headline'] = $node->get('field_experience_headline')->value;

        if($node->hasField('field_amenity_type'))
          $param['aminitesType'] = Term::load($node->get('field_amenity_type')->target_id)->name->value;

        if($node->hasField('field_intro_description'))
          $param['desc'] = $node->get('field_intro_description')->value;

        if($node->hasField('field_intro_short_description'))
          $param['sub_desc'] = $node->get('field_intro_short_description')->value;

        if($node->hasField('field_upload'))
          $param['pdf_url'] = $node->get('field_upload')->entity->uri->value;

        if($node->hasField('field_amenity_images_title'))
          $param['images_title'] = $node->get('field_amenity_images_title')->entity->uri->value;

        if($node->hasField('field_amenity_images')) {
          $gallery = array();
          foreach($node->get('field_amenity_images')->getValue() as $file){
            $fid = $file['target_id']; // get file fid;
            $gallery[] = \Drupal\file\Entity\File::load($fid)->getFileUri();
          }
          $param['gallery'] = $gallery;
        }

        if($node->hasField('field_info_block')){
          $infoData = [];
          foreach ($node->field_info_block->referencedEntities() as $paragraph) {
            foreach ($paragraph->field_information->referencedEntities() as $key=>$infoDetails) {
                $infoData['infoTitle'][$key] = $infoDetails->getTranslation($lang_id)->field_title->value;
                $infoData['infoDesc'][$key] =  $infoDetails->getTranslation($lang_id)->field_intro_description->value;
                $infoData['infoIcon'][$key] =  $infoDetails->get('field_icon')->entity->uri->value;
                $infoData['infoBgimage'][$key] = $infoDetails->get('field_banner_image')->entity->uri->value;
                $infoData['infoFile'][$key] = $infoDetails->get('field_upload')->entity->uri->value;
            }
          }
          $param['infoBlock'] = $infoData;
        }

        $param['image'] = $node->get('field_hero_image')->entity->uri->value;

        $param['link'] = $node->toUrl()->toString();
        if($node->hasField('field_amenity_icon'))
          $param['icon'] = $node->get('field_amenity_icon')->entity->uri->value;
        if($node->hasField('field_amenity_icon_color'))
          $param['icon_color'] = $node->get('field_amenity_icon_color')->value;
        $params[] = $param;
      }
      $amenity_items = array (
        '#theme' => 'amenity_list_item',
        '#data' => $params,
      );
      $amenity_eat_items = array (
        '#theme' => 'amenity_list_eat_item',
        '#data' => $params,
      );

      $amenity_data = \Drupal::service('renderer')->render($amenity_items);
      $amenity_eat_data = \Drupal::service('renderer')->render($amenity_eat_items);
          $resMessage = count($nids)>1? ' Results found' : ' Result found';
      $response->addCommand(new HtmlCommand('.search-result-message',  count($nids).t($resMessage)));
      $response->addCommand(new HtmlCommand('.search-results',  $amenity_data));
      $response->addCommand(new HtmlCommand('.searchEatModals',  $amenity_eat_data));

      if(count($nids)<=(($pageno)*$limit)) {
        $response->addCommand(new InvokeCommand('.load-more', 'removeClass', ['d-block']));
        $response->addCommand(new InvokeCommand('.load-more', 'addClass', ['d-none']));
      } else {
        $response->addCommand(new InvokeCommand('.load-more', 'removeClass', ['d-none']));
        $response->addCommand(new InvokeCommand('.load-more', 'addClass', ['d-block']));
      }

    } else {
      $response->addCommand(new HtmlCommand('.search-result-message',  'No Results found'));
      $response->addCommand(new HtmlCommand('.search-results',  ''));
      $response->addCommand(new InvokeCommand('.load-more', 'removeClass', ['d-block']));
      $response->addCommand(new InvokeCommand('.load-more', 'addClass', ['d-none']));
    }
    $response->addCommand(new InvokeCommand('.dark-overlay', 'removeClass', ['d-block']));
    $response->addCommand(new InvokeCommand('.dark-overlay', 'addClass', ['d-none']));
  }
  return $response;
}

/**
 * Implements function to the save address details by server ip address.
 *
 * @param Object $form
 *   Form  Object.
 * @param Object $form_state
 *   Form State Object.
 */
function contact_form_form_validate($form, FormStateInterface $form_state) {
  $error = FALSE;
  $form_state->setValue('inquiry', strip_tags($form_state->getValue('inquiry')));
  $form_state->setValue('first_name', strip_tags($form_state->getValue('first_name')));
  $form_state->setValue('last_name', strip_tags($form_state->getValue('last_name')));
  $form_state->setValue('email', strip_tags($form_state->getValue('email')));
  $form_state->setValue('phone_number', strip_tags($form_state->getValue('phone_number')));
  $form_state->setValue('country', strip_tags($form_state->getValue('country')));
  $form_state->setValue('message', strip_tags($form_state->getValue('message')));

  $language_manager = \Drupal::languageManager();
  $language_code =  $langcode= $language_manager->getCurrentLanguage()->getId();
        $config = \Drupal::config('hudayriyat_custom_configs.settings');

  $enquiry = $form_state->getValue('inquiry');
  $fname = $form_state->getValue('first_name');
  $lname = $form_state->getValue('last_name');
  $email = $form_state->getValue('email');
  $contact_number = $form_state->getValue('phone_number');
  $country = $form_state->getValue('country');
  $message = $form_state->getValue('message');

  if (!$fname) {
    $error = TRUE;

    if($langcode=='ar') {
      $nameErr = $config->get('custom_configs_contact_name_ar');
      $form_state->setErrorByName('first_name', $nameErr);
    } else {
      $nameErr = $config->get('custom_configs_contact_name_en');
      $form_state->setErrorByName('first_name', $nameErr);
    }
  }
  if (!$lname) {
    $error = TRUE;

    if($langcode=='ar') {
      $nameErr = $config->get('custom_configs_contact_last_name_ar');
      $form_state->setErrorByName('last_name', $nameErr);
    } else {
      $nameErr = $config->get('custom_configs_contact_last_name_en');
      $form_state->setErrorByName('last_name', $nameErr);
    }
  }
  if (!$contact_number) {
    $error = TRUE;

    if($langcode=='ar') {
      $contactNumberErr= $config->get('custom_configs_contact_contactNo_ar');
      $form_state->setErrorByName('phone_number', $contactNumberErr);
     } else {
      $contactNumberErr= $config->get('custom_configs_contact_contactNo_en');
      $form_state->setErrorByName('phone_number', $contactNumberErr);
     }
  }
  if (!$message) {
    $error = TRUE;

    if($langcode=='ar') {
      $messageErr= $config->get('custom_configs_contact_message_ar');
      $form_state->setErrorByName('message', $messageErr);
    } else {
      $messageErr= $config->get('custom_configs_contact_message_en');
      $form_state->setErrorByName('message', $messageErr);
    }
  }

  $form_state->setValue('url', strip_tags($form_state->getValue('url')));
  $url = $form_state->getValue('url');
  if ($url) {
    $error = TRUE;
  }

  if (!$email) {
    $error = TRUE;

     if($langcode=='ar') {
      $emailErr= $config->get('custom_configs_contact_email_ar');
      $form_state->setErrorByName('email', $emailErr);
    } else {
      $emailErr= $config->get('custom_configs_contact_email_en');
      $form_state->setErrorByName('email', $emailErr);
    }
  }
   if ($email) {
      $validate_email=\Drupal::service('email.validator')->isValid($email);
          if(!$validate_email) {
                 $error = TRUE;
                 if($langcode=='ar') {
                  $emailErr= 'عنوان البريد الإلكتروني '.$email.' غير صالح';
                  $form_state->setErrorByName('email', $emailErr);
                } else {
                  $emailErr= 'The email address '.$email.' is invalid';
                  $form_state->setErrorByName('email', $emailErr);
                }
          }
          if((!preg_match("/^[a-zA-Z0-9+_.-]+@[a-zA-Z0-9.-]+\.[a-z]{2,}$/ix", $email))) {
                 $error = TRUE;
                 if($langcode=='ar') {
                  $emailErr= 'عنوان البريد الإلكتروني '.$email.' غير صالح';
                  $form_state->setErrorByName('email', $emailErr);
                } else {
                  $emailErr= 'The email address '.$email.' is invalid';
                  $form_state->setErrorByName('email', $emailErr);
                }
          }
  }

  if (!$form_state->getValue('phone_number')) {
    $error = TRUE;

    if($langcode=='ar') {
      $contactNumberErr= $config->get('custom_configs_contact_contactNo_ar');
      $form_state->setErrorByName('phone_number', $contactNumberErr);
     } else {
      $contactNumberErr= $config->get('custom_configs_contact_contactNo_en');
      $form_state->setErrorByName('phone_number', $contactNumberErr);
     }
  }
  if ($form_state->getValue('phone_number') && strlen(trim($form_state->getValue('phone_number'))) < 5) {
    $error = TRUE;

    if($langcode=='ar') {
      $contactNumberErr= 'لا يمكن أن يكون رقم الهاتف أقل من 5 أرقام';
      $form_state->setErrorByName('phone_number', $contactNumberErr);
     } else {
      $contactNumberErr= 'Phone number cannot be less than 5 digits';
      $form_state->setErrorByName('phone_number', $contactNumberErr);
     }
  }
  if(!$form_state->getValue('captcha')) {
          $form_state->setValue('captcha', 123);
          if(!$error) {
                $error = FALSE;
          }
  }
  $form_state->setValue('url', strip_tags($form_state->getValue('url')));
  $url = trim($form_state->getValue('url'));
  if (isset($url) && $url !='') {
    $error = TRUE;
  }
  if(!$error) {
          $config = \Drupal::config('hudayriyat_custom_configs.settings');
          if ($enquiry == 'General Inquiry')
          {
            $to = $config->get('custom_configs_general_mail');
          }elseif ($enquiry == 'Leasing Inquiry')
          {
            $to = $config->get('custom_configs_leasing_mail');
          }else {
            $to = $config->get('custom_configs_general_mail');
          }

          if ($config->get('custom_configs_from_mail'))
          {
            $from = $config->get('custom_configs_from_mail');
          } else {
            $from = 'info@hudayriyatisland.ae';
          }

          $admin_params = array(
                              'from' => $from,
                              'to' => $to, //"athul@updot.in",  $to,
            'enquiry' => $enquiry,
            'first_name' => $fname,
            'last_name' => $lname,
            'email' => $email,
            'country' => $country,
            'contact_number' => $contact_number,
            'message' => $message,
                        'url' => $url,
                              'subject' => "Contact form has been filled."
          );
                  hudayriyat_contact_mail($admin_params, 'hudayriyatadminmail');
                  $subject = '';
                        if($language_code == 'ar') {
                          $user_template = 'hudayriyatusermailAR';
                          $subject = $config->get('custom_configs_subject_ar');
                        } else {
                          $subject = $config->get('custom_configs_subject_en');
                          $user_template = "hudayriyatusermailEN";
                        }

                  $user_params = array(
        'from' => $from,
        'to' => $email,
        'name' => $fname,
                'message' => $message,
                'url' => $url,
                    'subject' => $subject
      );
                  hudayriyat_contact_mail($user_params, $user_template);

      $path = '/thankyou';
      $url = Url::fromUserInput($path);
      $form_state->setRedirectUrl($url);

  }
}

function hudayriyat_contact_mail($params, $template){

  $config = \Drupal::config('hudayriyat_custom_configs.settings');
  $userName  = $config->get('custom_configs_email_username');
  $password  = $config->get('custom_configs_email_password');
  $host  = $config->get('custom_configs_email_host');
  $port  = $config->get('custom_configs_email_port');
  $SMTPSecure  = $config->get('custom_configs_email_SMTPSecure');

        $mail = new PHPMailer();

        $mail->isSMTP();
        $mail->Host = $host;
        $mail->SMTPAuth = true;
        $mail->Username = $userName; //paste one generated by Mailtrap
        $mail->Password = $password; //paste one generated by Mailtrap
        $mail->SMTPSecure = $SMTPSecure;
        $mail->Port = $port;

        $mail->setFrom($params['from'], 'Hudayriyat Mar Vista');
        $mail->addReplyTo($params['from'], 'Hudayriyat Mar Vista');

    global $base_url;
    $language_manager = \Drupal::languageManager();
    $language_code =  $language_manager->getCurrentLanguage()->getId();
    if($language_code == 'ar') {
            $logo =  $base_url.'/themes/custom/hudayriyat/logo-en-b.png';
    } else {
      $logo =  $base_url.'/themes/custom/hudayriyat/logo-en-b.png';
    }

        $mail->addAddress($params['to'], 'Hudayriyat Mar Vista Contact Form');
        $mail->Subject = $params['subject'];
        $mail->isHTML(true);
        $body_data = array (
          '#theme' => $template,
          '#data' => $params,
          '#logo' => $logo
        );
        $mailContent = \Drupal::service('renderer')->render($body_data); //$message = 'Message from office 365';
        $mail->Body = $mailContent;
        $mail->CharSet = 'UTF-8';

        $mail->send();

        \Drupal::logger('maillog')->notice(t('Mail sent successfully to: '. $params['to'].' Message: '.$params['message'].' URL param: '.$params['url']));

    return;
 }

function hudayriyat_contact_mail_backup($params, $template){
    $send_mail = new \Drupal\Core\Mail\Plugin\Mail\PhpMail(); // this is used to send HTML emails

    $message['headers'] = array(
    'content-type' => 'text/html;charset=UTF-8',
    'MIME-Version' => '1.0',
    'reply-to' => $params['from'],
    'from' => 'Hudayriyat Mar Vista <'.$params['from'].'>'
    );
    $message['to'] = $params['to'];
    $message['subject'] = $params['subject'];

    global $base_url;
    $language_manager = \Drupal::languageManager();
    $language_code =  $language_manager->getCurrentLanguage()->getId();
    if($language_code == 'ar') {
            $logo =  $base_url.'/themes/custom/hudayriyat/logo-en-b.png';
    } else {
      $logo =  $base_url.'/themes/custom/hudayriyat/logo-en-b.png';
    }
    $body_data = array (
      '#theme' => $template,
      '#data' => $params,
      '#logo' => $logo
    );
    $message['body'] = \Drupal::service('renderer')->render($body_data);
    $send_mail->mail($message);

    return;
  }

/**
 * Implements hook_mail_alter().
 *
 * Don't send any mail during migration.
 */
function ajax_custom_webform_mail_alter(&$message) {
  if ($message['id'] == 'webform_contact_email_notification') {
    $restrictWords = \Drupal::config("restrictwords.restrictwords.restrict_words")->get('restrictwords');
    $userProfanityData = explode(",", trim(strip_tags($restrictWords)));
    if (count($userProfanityData) > 0) {
      foreach ($userProfanityData as $userKeyword) {
        $emailBody   = trim($message['body'][0]);
        $findkeyword = trim($userKeyword);
        if (preg_match("/\b" . $findkeyword . "\b/i", $emailBody)) {
          $message['send'] = FALSE; return;
        }
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function ajax_custom_webform_webform_submission_presave(WebformSubmission $webform_submission) {
  $webform = $webform_submission->getWebform();
  if ($webform->id() == 'contact') {

    $data = $webform_submission->getData();
    $restrictWords = \Drupal::config("restrictwords.restrictwords.restrict_words")->get('restrictwords');
    $userProfanityData = explode(",", trim(strip_tags($restrictWords)));
    if (count($userProfanityData) > 0) {
      foreach ($userProfanityData as $userKeyword) {
        $findkeyword = trim($userKeyword);
        if (preg_match("/\b" . $findkeyword . "\b/i", $data['name'])||preg_match("/\b" . $findkeyword . "\b/i", $data['email'])||preg_match("/\b" . $findkeyword . "\b/i", $data['phone'])||preg_match("/\b" . $findkeyword . "\b/i", $data['subject'])||preg_match("/\b" . $findkeyword . "\b/i", $data['message'])) {
          $webform_submission->setElementData('is_content_wrong', 'yes');
        }
      }
    }
  }
}
/**
 * Implements hook_theme() to add the template definition.
 **/
function ajax_custom_webform_theme($existing, $type, $theme, $path) {

    return array(
        'hudayriyatusermailEN' => array(
            'variables' => array('data' => [],'logo' => NULL),
        ),
        'hudayriyatusermailAR' => array(
            'variables' => array('data' => [],'logo' => NULL),
        ),
        'hudayriyatadminmail' => array(
            'variables' => array('data' => [],'logo' => NULL),
        ),
        'amenity_list_item' => array(
            'variables' => array('data' => []),
        ),
        'amenity_list_eat_item' => array(
            'variables' => array('data' => []),
        ),
    );
}

function ajax_custom_webform_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  $name = $view->id();
  if ($name == 'all_news_list') {
      $dates = $view->exposed_raw_input['field_news_listing_title_value'];
      $date_value = explode(' - ', $dates);
      foreach ($query->where as &$condition_group) {
        array_push($condition_group['conditions'], [
          'field' => 'node__field_news_date.field_news_date_value',
          'value' => date("Y-m-d", strtotime($date_value[0])),
          'operator' => '>=',
        ]);
        array_push($condition_group['conditions'], [
          'field' => 'node__field_news_date.field_news_date_value',
          'value' => date("Y-m-d", strtotime($date_value[1])),
          'operator' => '<=',
        ]);
      }
      unset($query->where[1]['conditions'][3]);
  }
  if ($name == 'events_listing' || $name == 'promotions_listing') {
    $c_type = 'promotion_details';
    if($name == 'events_listing'){
      $c_type = 'event_details';
    }
      $dates = $view->exposed_raw_input['field_hero_image_title_value'];
      $date_values = explode(' - ', $dates);

      // ********* Events customization ***********
      $nid =[];
      if($dates)
        \Drupal::logger('module_name')->notice('<pre><code>' . print_r($date_values, TRUE) . '</code></pre>' );
        {
        $keyfeatures_nids=array();
        $lang_id = \Drupal::languageManager()->getCurrentLanguage()->getId();
        $datesQry =  "
          SELECT node_field_data.nid AS nid , UNIX_TIMESTAMP(node__field_event_multi_dates.field_event_multi_dates_value) as timestamp
          FROM node_field_data
            LEFT JOIN  node__field_hero_image_title ON node_field_data.nid = node__field_hero_image_title.entity_id AND (node__field_hero_image_title.deleted = '0' AND node__field_hero_image_title.langcode = node_field_data.langcode)
            LEFT JOIN  node__field_event_multi_dates ON node_field_data.nid = node__field_event_multi_dates.entity_id AND node__field_event_multi_dates.deleted = '0'
            WHERE (node_field_data.status = '1') AND (node_field_data.type IN ('".$c_type."'))
            AND (node_field_data.langcode IN ('$lang_id'))
            AND (UNIX_TIMESTAMP(node__field_event_multi_dates.field_event_multi_dates_value) >= " . strtotime($date_values[0] .  ' 00:00') . ")
            AND (UNIX_TIMESTAMP(node__field_event_multi_dates.field_event_multi_dates_value) <= " . strtotime($date_values[1] .  ' 24:00') . ")
          GROUP BY nid
          ORDER BY field_event_multi_dates_value ASC
          ";
        $nids = \Drupal::database()->query($datesQry)->fetchCol(0);

      }
        //    MIN(node__field_event_multi_dates.field_event_multi_dates_value) as minDate,
        //    MAX(node__field_event_multi_dates.field_event_multi_dates_value) as maxDate
      // ********* Events customization ***********

      //$nids=[];

      $query->addTable('node__field_event_multi_dates');

      //$query->addField(NULL, "DATE_FORMAT({node__field_event_multi_dates.field_event_multi_dates_value}, '%d')", 'field_event_date_1');
      //$query->addField(NULL, "DATE_FORMAT({node__field_event_multi_dates.field_event_multi_dates_value}, '%M')", 'field_event_end_date_1');

      if(!empty($nids) && count($nids)>0) {
        \Drupal::logger('abcd')->notice('<pre><code>' . print_r($nids, TRUE) . '</code></pre>' );
        foreach ($query->where as &$condition_group) {
          array_push($condition_group['conditions'], [
            'field' => 'nid',
            'value' => $nids,
            'operator' => 'IN',
          ]);
        }
      } else {
        foreach ($query->where as &$condition_group) {
          array_push($condition_group['conditions'], [
            'field' => 'node__field_event_multi_dates.field_event_multi_dates_value',
            'value' => '01/01/1970',
            'operator' => '<=',
          ]);
        }

      }

      $query->addField('', 'nid', '', ['function' => 'groupby']);
      $query->addGroupBy('node__field_event_multi_dates.entity_id');

      $query->orderby[] = array(
        'field' => 'node__field_event_multi_dates.field_event_multi_dates_value',
        'direction' => 'ASC',
      );
     unset($query->where[1]['conditions'][3]);

  }
  if ($name == 'offers_listing') {

     $sortValue = $view->exposed_raw_input['sort_by'];
     if($sortValue == 'field_hero_image_title_value'){
        $query->orderby[] = array(
        'field' => 'node__field_hero_image_title_field_hero_image_title_value',
        'direction' => 'ASC',
      );
     } elseif($sortValue == 'field_offer_end_date_value') {
       $query->orderby[] = array(
        'field' => 'node__field_offer_end_date.field_offer_end_date_value',
        'direction' => 'DESC',
      );
     } elseif($sortValue == 'field_offer_start_date_value') {
       $query->orderby[] = array(
        'field' => 'node__field_offer_end_date.field_offer_end_date_value',
        'direction' => 'ASC',
      );
     } else {
       $query->orderby[] = array(
        'field' => 'node__field_hero_image_title_field_hero_image_title_value',
        'direction' => 'ASC',
      );
     }
  }
}

function ajax_custom_webform_node_update(Drupal\node\NodeInterface $node) {
  if ($node->getType() == 'event_details') {
    $nid = $node->id();
    $datesQry =  "SELECT * FROM node__field_event_multi_dates
              WHERE entity_id = $nid ORDER BY field_event_multi_dates_value ASC";

    $dates = \Drupal::database()->query($datesQry)->fetchAll();

    $qry = \Drupal::database()->delete('node__field_event_multi_dates')
          ->condition('entity_id', $nid);

    $qry->execute();

    $qry = \Drupal::database()->insert('node__field_event_multi_dates')
          ->fields(['bundle', 'deleted', 'entity_id', 'revision_id',
                  'langcode', 'delta', 'field_event_multi_dates_value']);

    foreach($dates as $id=>$date) {
       $qry->values([$date->bundle,$date->deleted,$date->entity_id,$date->revision_id,
                    $date->langcode,$id,$date->field_event_multi_dates_value]);
    }
    $qry->execute();
  }
}

function ajax_custom_webform_views_pre_render1(ViewExecutable $view) {
  $lang = \Drupal::languageManager()->getCurrentLanguage()->getId();
  if ($view->id() == 'events_listing') {
    $values = $new_results = []; $nid=0;
    foreach ($view->result as $rid => $row) {
      foreach ($view->field as $fid => $field ) {
        $values[$rid][$fid] = $field->getValue($row);
        if($fid=='nid' && $values[$rid][$fid] != $nid) {
          $new_results[$values[$rid][$fid]] = $row;
          $nid = $values[$rid][$fid];
        }
      }
    }
    $view->result = array_values($new_results);
  }
}
